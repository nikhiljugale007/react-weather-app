{"version":3,"sources":["Components/DayForcast.js","Components/Wheather.js","App.js","reportWebVitals.js","index.js"],"names":["DayForcast","reading","imgURL","weather","icon","className","dt_txt","style","width","height","alignItems","src","Math","round","main","temp","description","override","css","Title","styled","h1","Input","input","SubTitle","h3","Wheather","state","cityName","location","wheather","fiveday","data","condition","isLoading","isSearching","fulldata","dailyData","handleInputChange","event","setState","target","value","loadFiveDays","fetch","then","res","json","list","filter","includes","fullData","console","log","search","a","alert","url","axios","get","response","current","text","formatDayCards","map","index","marginBottom","this","onChange","marginTop","onClick","color","loading","size","name","region","country","localtime","fontSize","temp_c","wind_kph","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11704f81.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const DayForcast = ({ reading }) => {\r\n\tconst imgURL = `https://openweathermap.org/img/w/${reading.weather[0].icon}.png`;\r\n\r\n\treturn (\r\n\t\t<div className=\"col-sm-10\">\r\n\t\t\t<div className=\"card bg-light text-dark\">\r\n\t\t\t\t<div>{reading.dt_txt}</div>\r\n\r\n\t\t\t\t<div style={{ width: \"100%\" }}>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tstyle={{ width: \"100px\", height: \"100px\", alignItems: \"center\" }}\r\n\t\t\t\t\t\tsrc={imgURL}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<h2>{Math.round(reading.main.temp)} °C</h2>\r\n\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t<p className=\"card-text\">{reading.weather[0].description}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport styled from \"styled-components\";\r\nimport { FcSearch } from \"react-icons/fc\";\r\nimport { css } from \"@emotion/core\";\r\nimport { DayForcast } from \"./DayForcast\";\r\nimport ClockLoader from \"react-spinners/ClockLoader\";\r\n\r\nimport \"../App.css\";\r\n\r\nconst override = css`\r\n\tdisplay: block;\r\n\tmargin: 0 auto;\r\n\tborder-color: red;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n\tfont-size: 1.5em;\r\n\tcolor: #fff;\r\n\tmargin: 0;\r\n`;\r\nconst MainTitle = styled.h1`\r\n\tfont-size: 2rem;\r\n\tcolor: #fff;\r\n\tmargin: 0;\r\n`;\r\nconst Input = styled.input`\r\n\tfont-size: 1.2rem;\r\n\tfont-weight: bold;\r\n\ttext-align: center;\r\n\r\n\tcolor: #000;\r\n`;\r\nconst SubTitle = styled.h3`\r\n\tfont-size: 20px;\r\n\ttext-align: center;\r\n\tcolor: #fff;\r\n\tmargin: 0 10px;\r\n`;\r\n\r\nexport default class Wheather extends Component {\r\n\tstate = {\r\n\t\tcityName: \"\",\r\n\t\tlocation: [],\r\n\t\twheather: [],\r\n\t\tfiveday: { data: [] },\r\n\t\tcondition: \"\",\r\n\t\ticon: \"\",\r\n\t\tisLoading: true,\r\n\t\tisSearching: false,\r\n\t\tfulldata: [],\r\n\t\tdailyData: [],\r\n\t};\r\n\r\n\thandleInputChange = (event) => {\r\n\t\tthis.setState({ cityName: event.target.value });\r\n\t};\r\n\r\n\tloadFiveDays = () => {\r\n\t\tconst url = `http://api.openweathermap.org/data/2.5/forecast?zip=11102&units=imperial&APPID=b76931bb32910a956b02a3cb2dd0c84d`;\r\n\t\t//api.openweathermap.org/data/2.5/forecast?zip=11102&units=imperial&APPID=b76931bb32910a956b02a3cb2dd0c84d\r\n\t\thttp: fetch(url)\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\tconst dailyData = data.list.filter((reading) =>\r\n\t\t\t\t\treading.dt_txt.includes(\"18:00:00\")\r\n\t\t\t\t);\r\n\t\t\t\tthis.setState(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfullData: data.list,\r\n\t\t\t\t\t\tdailyData: dailyData,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t() => console.log(this.state)\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t};\r\n\r\n\tsearch = async () => {\r\n\t\tif (this.state.cityName === \"\") {\r\n\t\t\talert(\"City name cannot be empty\");\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tisLoading: true,\r\n\t\t\tisSearching: true,\r\n\t\t});\r\n\t\tconst url = `http://api.weatherapi.com/v1/current.json?key=f9fb9199a73042c096f24816211705&q=${this.state.cityName}`;\r\n\r\n\t\taxios.get(url).then((response) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tlocation: response.data.location,\r\n\t\t\t\twheather: response.data.current,\r\n\t\t\t\tcondition: response.data.current.condition.text,\r\n\t\t\t\ticon: response.data.current.condition.icon,\r\n\t\t\t\tisLoading: false,\r\n\t\t\t});\r\n\r\n\t\t\tthis.loadFiveDays();\r\n\t\t});\r\n\t};\r\n\r\n\tformatDayCards = () => {\r\n\t\treturn (\r\n\t\t\t<div className=\"displayLocation\">\r\n\t\t\t\t{this.state.dailyData.map((reading, index) => (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<DayForcast reading={reading} index={index} />\r\n\t\t\t\t\t\t{console.log(reading)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Title style={{ marginBottom: \"0px\" }}>Wheather App</Title>\r\n\t\t\t\t<br />\r\n\r\n\t\t\t\t<Input\r\n\t\t\t\t\tclassName=\"inputSearch\"\r\n\t\t\t\t\tvalue={this.state.cityName}\r\n\t\t\t\t\tonChange={this.handleInputChange}\r\n\t\t\t\t\tstyle={{ marginTop: \"0px\" }}\r\n\t\t\t\t/>\r\n\t\t\t\t{/* <button onClick={this.search}>Search</button> */}\r\n\t\t\t\t<FcSearch onClick={this.search} />\r\n\r\n\t\t\t\t{!this.state.isLoading ? (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Title>{this.state.location.name}</Title>\r\n\t\t\t\t\t\t<div className=\"displayLocation\">\r\n\t\t\t\t\t\t\t<SubTitle>{this.state.location.region}</SubTitle>\r\n\t\t\t\t\t\t\t<SubTitle>{this.state.location.country}</SubTitle>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<SubTitle>{this.state.location.localtime}</SubTitle>\r\n\t\t\t\t\t\t<Title style={{ fontSize: \"2rem\" }}>\r\n\t\t\t\t\t\t\t{this.state.wheather.temp_c}°C\r\n\t\t\t\t\t\t</Title>\r\n\t\t\t\t\t\t<Title>{this.state.wheather.wind_kph} km/hr</Title>\r\n\t\t\t\t\t\t<Title>{this.state.condition}</Title>\r\n\t\t\t\t\t\t<img src={this.state.icon} />\r\n\t\t\t\t\t\t<Title>Five Day Forecast</Title>\r\n\t\t\t\t\t\t{this.formatDayCards()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<ClockLoader\r\n\t\t\t\t\t\t\tcolor=\"#000\"\r\n\t\t\t\t\t\t\tloading=\"true\"\r\n\t\t\t\t\t\t\tcss={override}\r\n\t\t\t\t\t\t\tsize={100}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{this.state.isSearching ? (\r\n\t\t\t\t\t\t\t<div>Loading...</div>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<div>Enter city name</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import \"./App.css\";\nimport { DayForcast } from \"./Components/DayForcast\";\nimport Wheather from \"./Components/Wheather\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<Wheather />\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}